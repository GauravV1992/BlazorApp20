@page "login"
@using BlazorApp20.Data;
@using BlazorApp20.Services;
@using System.Security.Claims;
@using System;
@using System.Collections.Generic;
@using System.Security.Claims;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.RazorPages;

@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@*@inject IHttpContextAccessor httpContextAccessor*@
@inject AuthenticationStateProvider AuthenticationStateProvider
<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="model.Username" class="form-control" />
                <ValidationMessage For="@(() => model.Username)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <button  class="btn btn-primary">
               
                Login
            </button>

        </EditForm>
    </div>
</div>

@code {

    private BlazorApp20.Data.Login model = new BlazorApp20.Data.Login();
  
    private async void OnValidSubmit()
    {
        // reset alerts on submit
        //AlertService.Clear();


        try
        {
            var res = AccountService.Login(model);

            if (res.Result == true)
            {
                //var loginCookieExpirationDays = _configuration.GetValue("LoginCookieExpirationDays", 30);
                //var cookieClaims = await createCookieClaimsAsync(user);
                //await HttpContext.SignInAsync(
                //    CookieAuthenticationDefaults.AuthenticationScheme,
                //    cookieClaims,
                //    new AuthenticationProperties
                //    {
                //        IsPersistent = true, // "Remember Me"
                //        IssuedUtc = DateTimeOffset.UtcNow,
                //        ExpiresUtc = DateTimeOffset.UtcNow.AddDays(loginCookieExpirationDays)
                //    });
                NavigationManager.NavigateTo("");
            }
            else
            {
                NavigationManager.NavigateTo("/account/login");
            }
            //var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";

        }
        catch (Exception ex)
        {
           
        }
    }
}